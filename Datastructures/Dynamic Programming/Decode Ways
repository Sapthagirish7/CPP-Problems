Problem Description

A message containing letters from A-Z is being encoded to numbers using the following mapping:

 'A' -> 1
 'B' -> 2
 ...
 'Z' -> 26
Given an encoded message A containing digits, determine the total number of ways to decode it modulo 109 + 7.
idea:
//we just have to check if there is a possibility of sting of length <=26 and add that to the res.

code:
Bottom-Up Appraoch
int Solution::numDecodings(string A) {
    vector<int> dp(A.size()+1,0);
    dp[0]=1;
    if(A[0]=='0')
    dp[1]=0;
    else
    dp[1]=1;
    for(int i=2;i<=A.size();i++)
    {
        if(A[i-1]>'0')
        dp[i]=dp[i-1];
        if((A[i-2]=='1') || (A[i-2]=='2' && A[i-1]<'7'))
        dp[i]=(dp[i-2]+dp[i])%1000000007;
    }
    return dp[A.size()];
}

memoization:
int dp[101];
 
    int fun(string s,int n){
        int mod=1e9+7;
        if(n==s.size()) return dp[n]=1;
        if(s[n]=='0')  return dp[n]=0;
        if(dp[n]!=-1) return dp[n];
        int res=fun(s,n+1)%mod;
        
        if(n<s.size()-1 &&(s[n]=='1'||(s[n]=='2' && s[n+1]<'7'))) res=(res+fun(s,n+2))%mod;
        return dp[n]=res;
        
    }
int Solution::numDecodings(string s) {
     if(s.size()==0) return 0;
     int mod=1e9+7;
         memset(dp,-1,sizeof(dp));
         int n=s.size();
        return fun(s,0)%mod;
}
