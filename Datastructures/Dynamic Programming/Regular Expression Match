Implement wildcard pattern matching with support for ‘?’ and ‘*’ for strings A and B.

’?’ : Matches any single character.
‘*’ : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Bottom -Up Approach:

int Solution::isMatch(const string A, const string B) {
    int m=A.size(); int n=B.size();
    vector<vector<bool>>dp(m+1,vector<bool>(n+1));
    dp[0][0]=true;
    for(int j=1;j<=n;j++){
        if(B[j-1]=='*') dp[0][j]=dp[0][j-1];
    }
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(A[i-1] == B[j-1] || B[j-1] == '?'){
                dp[i][j] = dp[i-1][j-1];
            }
            else if(B[j-1] == '*'){
                dp[i][j] = (dp[i-1][j] || dp[i][j-1]);
            }
            else{
                dp[i][j] = false;
            }
        }
    }
    return dp[m][n];
}

Regula Expression Match-2:
Just a small change in the condn.
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.

'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

code:
int Solution::isMatch(const string A, const string B) {
    int m=A.size(); int n=B.size();
    vector<vector<bool>>dp(m+1,vector<bool>(n+1));
    dp[0][0]=true;
    for(int j=1;j<=n;j++){
        if(B[j-1]=='*') dp[0][j]=dp[0][j-2];
    }
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(A[i-1] == B[j-1] || B[j-1] == '.'){
                dp[i][j] = dp[i-1][j-1];
            }
            else if(B[j-1] == '*'){
                dp[i][j] = dp[i][j-2];
                if(B[j-2]=='.' ||A[i-1]==B[j-2]){
                    dp[i][j]=dp[i][j] | dp[i-1][j];
                }
            }
            else{
                dp[i][j] = false;
            }
        }
    }
    return dp[m][n];
}
