Problem Description

Given two strings A and B. Find the longest common sequence ( A sequence which does not need to be contiguous), which is common in both the strings.

You need to return the length of such longest common subsequence.

ottom-up DP utilizes a matrix m where we track LCS sizes for each combination of i and j.

If a[i] == b[j], LCS for i and j would be 1 plus LCS till the i-1 and j-1 indexes.
Otherwise, we will take the largest LCS if we skip a charracter from one of the string (max(m[i - 1][j], m[i][j - 1]).
This picture shows the populated matrix for "xabccde", "ace" test case.

memoization:
int fun(string &a,string &b,int m,int n,vector<vector<int> > &dp)
{
 if(m==-1 || n==-1)
    return 0;
 if(dp[m][n]!=-1)
     return dp[m][n];
if(a[m]==b[n])
   dp[m][n]=max(dp[m][n],1+fun(a,b,m-1,n-1,dp));
else
  dp[m][n]=max(fun(a,b,m-1,n,dp),fun(a,b,m,n-1,dp));
return dp[m][n];
}
 
int Solution::solve(string A, string B) {
int m=A.size();
int n=B.size();
vector< vector<int> >dp(m);
for(int i=0;i<m;i++)
{
dp[i].resize(n);
for(int j=0;j<n;j++)
  dp[i][j]=-1;
}
 
int ans=fun(A,B,m-1,n-1,dp);
return ans;
}


Top-Down Approach:
int helper(string text1, string text2,int i,int j){
       int n1=text1.size();
        int n2=text2.size();
        vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if(text1[i-1]==text2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n1][n2];
    }
int Solution::solve(string A, string B) {
     
    return helper(A,B,0,0);
}
memory optimization using dp[i%2][j]=1+dp[(i-1)%2][j-1]; using 2 vectors for dp
vector<vector<int>>dp(2,vector<int>(min(m,n),0);
