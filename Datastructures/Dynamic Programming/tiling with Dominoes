Problem is Based on Dynamic Programming

Defining Subproblems:
At any point while filling the board, there are three possible states that the last column can be in:


An = No. of ways to completely fill a 3 x n board. (We need to find this)
Bn = No. of ways to fill a 3 x n board with top corner in last column not filled.
Cn = No. of ways to fill a 3 x n board with bottom corner in last column not filled.

NOTE: The following states are impossible to reach:


Finding Reccurences
NOTE: Even though Bn and Cn are different states, they will be equal for same ‘n’. i.e Bn = Cn
Hence, we only need to calculate one of them.

Calculating An:

An = An-2 + Bn-1 + Cn-1
An = An-2 + 2*(Bn-1)

Calculating Bn:

Bn = An-1 + Bn-2

Final Recursive Relations are:
An = An-2 + 2*(Bn-1)
Bn = An-1 + Bn-2

Base Cases:
A0 = 1
A1 = 0
B0 = 0
B1 = 1

code:

#define M 1000000007
int Solution::solve(int n) {
    if(n%2!=0)return 0;
    long long Anext=0, Aprev=1, Bnext=0, Bprev=1;
    for(int i=2; i<=n; i+=2){
        Anext=(Aprev+2*Bprev)%M;
        Aprev=Anext;
        Bnext=(Aprev+Bprev)%M;
        Bprev=Bnext;
    }
    return Anext;
}
