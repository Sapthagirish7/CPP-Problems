//Given an directed graph having A nodes. A matrix B of size M x 2 is given which represents
//the M edges such that there is a edge directed from node B[i][0] to node B[i][1].
//Find whether the graph contains a cycle or not, return 1 if cycle is present else return 0.



bool dfs(vector<int> adj[],int s,vector<bool> &visited){
visited[s]=true;

for(int u:adj[s])
{
    if(visited[u]==false && dfs(adj,u,visited)==true)
        return true;
    else if(visited[u]==true)
        return true;
}

visited[s]=false;
return false;
}
int Solution::solve(int A, vector<vector<int>> &B) {
vector<int> adj[A+1];
for(auto it:B)
{
adj[it[0]].push_back(it[1]);  //creating an adjacency list
}
vector<bool>visited(A+1,false);
for(int i=1;i<=A;i++){
  if(visited[i]==false){
     if(dfs(adj,i,visited)==true)
       return true;
   }
}
return false;
}

Method-2: Union & Find

int Find(vector<int> &parent, int i)
{
    if(parent[i]==-1)
    return i;
    return Find(parent,parent[i]);
}

void Union(vector<int> &parent,int x,int y)
{
    int xset = Find(parent,y);
    int yset = Find(parent,x);
    parent[yset] = xset;
}

int Solution::solve(int a, vector<vector<int> > &b) {
    vector<int> parent(a+1,-1);
    for(int i=0;i<b.size();i++)
    {
        int x = Find(parent,b[i][0]);
        int y = Find(parent,b[i][1]);
        
        if(x==y)
        return 1;
        
        Union(parent, x, y);
    }
    return 0;
}
