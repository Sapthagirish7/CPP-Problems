//Given a 2D character matrix A of size N x M, containing 'X' and 'O', capture all regions surrounded by 'X'.

//A region is captured by flipping all 'O's into 'X's in that surrounded region.


void dfs(vector<vector<char>>& image, int i, int j) {
        if (i < 0 || j < 0 || i >= image.size() || j >= image[0].size() || image[i][j] != 'O') return;
        
        image[i][j] = '1';
        
        dfs(image, i, j - 1);
        dfs(image, i, j + 1);
        dfs(image, i - 1, j);
        dfs(image, i + 1, j);
               
    }
void Solution::solve(vector<vector<char> > &board) {
     int r=board.size(); int c=board[0].size();
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
               if(i==0||i==r-1){
                 if(board[i][j]=='O')  dfs(board,i,j);        
               }
                if(j==0||j==c-1){
                    if(board[i][j]=='O')  dfs(board,i,j);        
               } 
            }
        }
        for(int i=1;i<r-1;i++){
            for(int j=1;j<c-1;j++){
                
                if(board[i][j]=='O')
                        board[i][j]='X';
            }
        }
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                 if(board[i][j]=='1')
                     board[i][j]='O';
            }
        }
}
