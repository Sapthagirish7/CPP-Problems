Given a singly linked list and an integer K, reverses the nodes of the

list K at a time and returns modified linked list.

 NOTE : The length of the list is divisible by K 
Example :

Given linked list 1 -> 2 -> 3 -> 4 -> 5 -> 6 and K=2,

You should return 2 -> 1 -> 4 -> 3 -> 6 -> 5

Try to solve the problem using constant extra space.



code:

ListNode* Solution::reverseList(ListNode* A, int B) {
    ListNode* reversed;
    ListNode* prev=NULL;ListNode* cur;
    int k=0;
    ListNode* start=A;
     while(k<B){
             cur=A->next;
             A->next=prev;
             prev=A;
             A=cur;
             k++;
         }
         reversed=prev;
     while(A){
         prev=NULL;
         k=0;
         ListNode* s=A;
         while(k<B){
            cur=A->next;
             A->next=prev;
             prev=A;
             A=cur;
             k++;
         }
         start->next=prev;
         start=s;
     }
   return reversed;
}


Method-2:
 ListNode *curr = A, *prev = NULL, *next = NULL;
    int cnt =0;
     while(cnt<B && curr) {
         next = curr->next;
         curr->next = prev;
         prev = curr;
         curr = next;
         cnt++;
     }
     if(next) {
         A->next = reverseList(next, B);
     }
     return prev;
