Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Try solving it using constant additional space.


code:

ListNode* Solution::detectCycle(ListNode* A) {
   ListNode* slow=A; //This is the tortoise pointer i.e slow pointer
   ListNode* fast=A;  //This is the hare pointer i.e fast pointer
   if(!A->next || !A->next->next)//just check if size of list is either 1 or 2 
         return NULL;
   slow=slow->next;
   fast=fast->next->next;
   while( fast!=slow){
       if(!fast || !fast->next || !fast->next->next)// weâ€™ll have to check this for the next 2 stmts. to be valid
                 return NULL;
       slow=slow->next;
       fast=fast->next->next;
   }
   slow=A;    // put tortoise at start and hare is at the position where they earlier meet
   while(slow!=fast){
       slow=slow->next;
       fast=fast->next;
   }
   return slow;
}
