Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*n.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"
Make sure the returned list of strings are sorted.

code:

void helper(int n,int lp,int rp,vector<string>& ans,string temp){
    if(lp>n ||rp>n ) return;
    if(lp==n && rp==n){
        ans.push_back(temp);
        return;
    }
    if(rp>lp) return;
    helper(n,lp+1,rp,ans,temp+'(');
    helper(n,lp,rp+1,ans,temp+')');
}
vector<string> Solution::generateParenthesis(int A) {
    vector<string> ans;
    string temp;
    helper(A,0,0,ans,temp);
    return ans;
}
