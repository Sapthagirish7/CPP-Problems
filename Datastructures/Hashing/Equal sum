Given an array A of integers, find the index of values that satisfy A + B = C + D, where A,B,C & D are integers values in the array

Note:

1) Return the indices `A1 B1 C1 D1`, so that 
  A[A1] + A[B1] = A[C1] + A[D1]
  A1 < B1, C1 < D1
  A1 < C1, B1 != D1, B1 != C1 

2) If there are more than one solutions, 
   then return the tuple of values which are lexicographical smallest. 

Assume we have two solutions
S1 : A1 B1 C1 D1 ( these are values of indices int the array )  
S2 : A2 B2 C2 D2

S1 is lexicographically smaller than S2 iff
  A1 < A2 OR
  A1 = A2 AND B1 < B2 OR
  A1 = A2 AND B1 = B2 AND C1 < C2 OR 
  A1 = A2 AND B1 = B2 AND C1 = C2 AND D1 < D2
Example:

Input: [3, 4, 7, 1, 2, 9, 8]
Output: [0, 2, 3, 5] (O index)
If no solution is possible, return an empty list.


code:

vector<int> Solution::equal(vector<int> &A) {
    unordered_map<int,vector<pair<int,int>>>mp;
    vector<vector<int>>v;
    for(int i=0;i<A.size();i++){
        for(int j=i+1;j<A.size();j++){
            int sum=A[i]+A[j];     
            if(mp.find(sum)!=mp.end()) {   // we check any pair with same sum is found
                auto it=mp.find(sum);          
                pair<int,int> p=it->second[0];       // if it is found we consider the first pair as it will have lesser index. 
                if(p.first<i && p.second!=j && p.second!=i)   // then we will check if that pair has same indexes as current pair.
                    v.push_back({p.first,p.second,i,j});       // if not we push them back to ans
            }
            mp[sum].push_back({i,j});
        }
    }
    if(v.size()==0) return {};
    sort(v.begin(),v.end());    // here we sort the tuples and return the first tuple which will have minimum index
    return v[0];
}
