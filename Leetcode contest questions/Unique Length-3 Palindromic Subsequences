Given a string s, return the number of unique palindromes of length three that are a subsequence of s.

Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

A palindrome is a string that reads the same forwards and backwards.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".

code:
int countPalindromicSubsequence(string s) {
     int first[26]={[0 ... 25]=INT_MAX};  //vector<int>first(26,INT_MAX);
        int last[26];
        for(int i=0;i<s.size();i++){
            first[s[i]-'a']=min(first[s[i]-'a'],i);
            last[s[i]-'a']=i;
        }
        int res=0;
        for(int i=0;i<26;i++){
            if(first[i]!=INT_MAX && first[i]!=last[i]){ // if the first and last are same that means there is only one occurence.
                res+=unordered_set<char>(s.begin()+first[i]+1,s.begin()+last[i]).size(); //Now we cnt the distinct char b/w the first and las charectors.
            }
        }
        return res;
    }
      
